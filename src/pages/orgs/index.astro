---
import BaseHead from "../../components/BaseHead.astro"
import Header from "../../components/Header.astro"
import Theme from "../../layouts/Theme.astro"
import Footer from "../../components/Footer.astro"

import { SITE_TITLE, SITE_DESCRIPTION, GTM_MEASUREMENT_ID } from "../../consts"
import { getCollection } from "astro:content"
import { Image } from "astro:assets"
import { GoogleTagmanager, GoogleTagmanagerNoscript } from "@digi4care/astro-google-tagmanager"

const orgs = (await getCollection("orgs")).sort((a, b) => a.data.title.localeCompare(b.data.title))
---

<!doctype html>
<html lang="en">
  <head>
    <BaseHead title={SITE_TITLE} description={SITE_DESCRIPTION} />
    <GoogleTagmanager id={GTM_MEASUREMENT_ID} />
  </head>
  <Theme>
    <GoogleTagmanagerNoscript id={GTM_MEASUREMENT_ID} />
    <Header />
    <main class="org-list-page pt-xl pb-3xl">
      <div class="container">
        <header class="org-list-header mb-l">
          <h1 class="page-title text-m text-accent">Organisations</h1>
          <div class="org-search form-control">
            <i class="form-control__prepend fa fa-search"></i>
            <input id="org-search__input" type="text" class="form-control__input" placeholder="Search" />
          </div>
        </header>
        <ul class="org-list">
          {
            orgs.map((org) => (
              <li class="org-list-item" data-id={org.id}>
                <a class="card" href={`/orgs/${org.id}/`}>
                  {org.data.logoImage && (
                    <div class="org-list-item__logo">
                      <Image width={360} height={360} src={org.data.logoImage ?? org.data.heroImage} alt="" />
                    </div>
                  )}
                  {!org.data.logoImage && (
                    <div class="org-list-item__heroImg">
                      <Image width={360} height={360} src={org.data.heroImage} alt="" />
                    </div>
                  )}
                  <div class="org-list-item__info p-m">
                    <div class="org-list-item__info__top">
                      <div class="org-name text-2xl text-bold mb-xs">{org.data.title}</div>
                      <div class="org-description text-gray-5 mb-s">{org.data.description.slice(0, 100)}...</div>
                    </div>
                    <div class="org-list-item__info__bottom">
                      <ul class="tag-list mb-0">
                        {org.data.tags?.slice(0, 5).map((tag) => (
                          <li class="tag"># {tag}</li>
                        ))}
                      </ul>
                    </div>
                  </div>
                </a>
              </li>
            ))
          }
        </ul>
        <div class="org-list__empty" style="display: none;">
          <p class="text-gray-5 text-2xl">No results found!</p>
        </div>
      </div>
    </main>
  </Theme>
  <Footer />

  <script>
    // fetch all orgs from "orgs/search-index.json"
    const orgs = []
    fetch("/orgs/search-index.json")
      .then((response) => response.json())
      .then((data) => {
        orgs.push(...data)
      })
      .catch((error) => {
        console.error(`Error fetching search index for 'orgs' collection:`, error)
      })

    // listen for input change on search input
    const searchInputEl = document.querySelector("#org-search__input")

    searchInputEl.addEventListener("input", (e) => {
      const searchValue = e.target.value.toLowerCase().trim()
      const emptyStateEl = document.querySelector(".org-list__empty")

      // if search value is empty, show all orgs
      if (searchValue === "") {
        // hide "No results found" message
        emptyStateEl.style.display = "none"

        // show all orgs
        document.querySelectorAll(".org-list-item").forEach((item) => {
          item.classList.remove("hide")
        })

        return
      }

      // filter orgs based on search value
      const filteredOrgs = orgs.filter((org) => {
        // check if org name includes search value
        if (org.title.toLowerCase().includes(searchValue)) {
          return true
        }
        // check if org tags include search value
        if (org.tags.some((tag) => tag.toLowerCase().includes(searchValue))) {
          return true
        }
        return false
      })

      // if no orgs found, show "No results found" message
      if (filteredOrgs.length === 0) {
        emptyStateEl.style.display = "block"
      } else {
        emptyStateEl.style.display = "none"
      }

      // show/hide orgs based on search value
      document.querySelectorAll(".org-list-item").forEach((item) => {
        const orgId = item.getAttribute("data-id")
        const show = filteredOrgs.some((org) => org.id === orgId)
        if (show) {
          item.classList.remove("hide")
        } else {
          item.classList.add("hide")
        }
      })
    })
  </script>
</html>

<style lang="scss">
  .org-list-header {
    // layout as flex, row, space-between
    display: flex;
    flex-direction: row;
    justify-content: space-between;
    align-items: center;
    gap: 1rem;

    // add padding to left and right
    padding: 0 1rem;

    .page-title {
      // remove default bottom margin
      margin-bottom: 0;
    }

    .org-search {
      // increase font size
      font-size: 1rem;
    }

    //
    // on mobile view
    //
    @media (max-width: 768px) {
      // stack the elements
      flex-direction: column;
      align-items: stretch;

      // add margin below h1
      // .page-title {
      //   margin-bottom: 1rem;
      // }

      // make search input full width
      .org-search {
        width: 100%;
        margin-bottom: 1rem;
        input {
          width: 100%;
        }
      }
    }
  }

  .org-list {
    // remove list style
    list-style: none;
    padding: 0;
    margin: 0;

    // display a grid
    display: grid;
    grid-template-columns: 1fr; // on mobile, 1 column
    // column-gap: 2rem;
    // row-gap: 2rem;

    padding: 0; // on mobile, no padding

    @media (min-width: 768px) {
      & {
        grid-template-columns: repeat(2, 1fr);
        padding: 0 1rem;
        column-gap: 2rem;
        row-gap: 2rem;
      }
    }

    @media (min-width: 1024px) {
      & {
        grid-template-columns: repeat(3, 1fr);
        padding: 0 1rem;
      }
    }

    @media (min-width: 1280px) {
      & {
        padding: 0; // on desktop, no padding
      }
    }
  }

  .org-list-item {
    $size: 300px;
    width: 100%;
    min-width: $size;

    // layout
    display: flex;
    flex-direction: column; // this is to make the card stretch

    a {
      display: inline-flex;
      flex-direction: column;

      height: 100%;

      text-decoration: none;
      color: inherit;
      &:visited {
        color: inherit;
      }

      // logo image
      .org-list-item__logo {
        width: 100%;

        // prevent the image from touching the edges
        padding: 2rem;

        // drop shadow
        box-shadow: 0 0 10px 5px rgba(198, 198, 198, 0.3);

        // constrain the image to the tile
        img {
          width: 100%;
          // height: 360px;
          max-width: 100%;
          object-fit: contain;
        }
      }

      // hero image ( if no logo image )
      .org-list-item__heroImg {
        width: 100%;
        height: 360px;
        overflow: hidden;
        position: relative;

        img {
          width: 100%;
          height: 100%;
          object-fit: cover; // cover the entire area instead of contain
          object-position: center;
        }
      }

      // org info block
      .org-list-item__info {
        flex: 1 1 auto;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
      }

      &:hover .org-name {
        text-decoration: underline;
        text-decoration-thickness: 2px;
      }

      //
      // on mobile view
      @media (max-width: 768px) {
        & {
          border-top: 1px solid var(--gray-2);
          // increase bottom padding on mobile
          // to give more separation between cards
          padding-bottom: 2rem;
        }
      }
    }

    // is hidden
    &.hide {
      display: none;
    }
  }
</style>
