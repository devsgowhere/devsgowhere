---
import BaseHead from "../../components/BaseHead.astro";
import Header from "../../components/Header.astro";
import Theme from "../../layouts/Theme.astro";
import Footer from "../../components/Footer.astro";

import { SITE_TITLE, SITE_DESCRIPTION } from "../../consts";
import { getCollection } from "astro:content";
import { Image } from "astro:assets";
import FormattedEventDate from "../../components/FormattedEventDate.astro";

const orgs = await getCollection("orgs");

const now = new Date();
const events = (await getCollection("events"))
  .filter((event) => {
    const startDate = new Date(event.data.startDate);
    return startDate >= now;
  })
  .sort((a, b) => a.data.startDate.valueOf() - b.data.startDate.valueOf());
---

<!doctype html>
<html lang="en">
  <head>
    <BaseHead title={SITE_TITLE} description={SITE_DESCRIPTION} />
    <script src="https://app.unpkg.com/framer-motion@12.12.1/dist/framer-motion.min.js"></script>
  </head>
  <Theme>
    <Header />
    <main class="events-list-page pt-xl pb-3xl">
      <h1 class="text-3xl text-bold text-accent mb-xl">
        Upcoming Events
      </h1>      
      <div class="container">
        <section>
              <div class="event-search form-control">
                <i class="form-control__prepend fa fa-search"></i>
                <input
                  id="event-search__input"
                  type="text"
                  class="form-control__input"
                  placeholder="Search events by name, tags, organizer..."
                />
                <button id="event-search__clear" class="form-control__append" style="display: none;">
                  <i class="fa fa-times"></i>
                </button>
                <div id="search-loader" class="search-loader" style="display: none;">
                  <div class="search-loader__spinner"></div>
                </div>
              </div>
              <div class="search-results-info mb-m">
                <p>Showing <span id="results-count" class="results-count">0</span> results</p>
              </div>
          <ul class="event-list">
            {
              events.map((event) => (
                <li class="event-list-item" data-id={event.id}>
                  <a class="card" href={`/events/${event.id}/`}>
                    <Image
                      width={720}
                      height={360}
                      src={event.data.heroImage}
                      alt=""
                    />
                    <div class="event-list-item__info">
                    <div class="org-name text-s text-gray-5 mb-2xs">
                        {
                          orgs.find((org) => org.id === event.data.org.id)?.data
                            .title
                        }
                      </div>
                      <div class="event-title text-accent text-3xl text-bold mb-l">{event.data.title}</div>
                      <div class="event-date mb-xs text-bold">
                        <i class="fa fa-calendar-days mr-xs"></i>
                        <FormattedEventDate
                          startDate={event.data.startDate}
                          startTime={event.data.startTime}
                          endDate={event.data.endDate}
                          endTime={event.data.endTime}
                        />
                      </div>
                      <div class="event-location mb-0">
                        <div style="display: flex; align-items: baseline;">
                        <i class="fa fa-location-dot mr-xs"></i>
                        <div style="display: flex; flex-direction: column; align-items: flex-start;">
                        <p class="ml-xs mt-0 mb-0 text-bold">{event.data.venue}</p>
                        <p class="text-capitalise ml-xs mt-0">{(event.data.venueAddress ?? '').toLowerCase()}</p>
                        </div>
                        </div>
                      </div>
                      <div class="event-description mb-m">{event.data.description.slice(0, 200)}...</div>                      
                        <ul class="tag-list mb-0">
                        { event.data.tags?.slice(0,5).map((tag)=>{
                          return (
                            <li class="tag">
                              #{tag}
                            </li>
                          )
                        }) }
                      </ul>
                    </div>                    
                  </a>
                </li>
              ))
            }
          </ul>        
          <div class="event-list__empty" style="display: none;">
            <p class="text-gray-5 text-2xl">No results found ðŸ¤•</p>
          </div>
      </div>
    </main>
    <Footer />
  </Theme>
  <script>
    // Import search utilities
    import { normalize, debounce, filterEvents, animateElement, animateNumber } from '../../utils/searchUtils.js';

    // Fetch search index
    const events = [];
    fetch('/events/search-index.json')
      .then(response => response.json())
      .then(data => {
        events.push(...data);
        // Show total count on initial load
        updateResultsCount(events.length);
        // Add animation class after initial load
        document.querySelectorAll('.event-list-item').forEach(item => {
          item.classList.add('loaded');
        });
      })
      .catch(error => console.error('Error fetching search index:', error));

    // DOM elements
    const searchInput = document.querySelector('#event-search__input');
    const clearButton = document.querySelector('#event-search__clear');
    const emptyState = document.querySelector('.event-list__empty');
    const resultsInfo = document.querySelector('.search-results-info');
    const resultsCount = document.querySelector('#results-count');
    const eventItems = document.querySelectorAll('.event-list-item');
    const searchLoader = document.querySelector('#search-loader');

    // Initialize results count with the total number from DOM
    updateResultsCount(eventItems.length);

    // Helper function to update results count display
    function updateResultsCount(count) {
      // Animate count change
      const currentCount = parseInt(resultsCount.textContent);
      animateNumber(resultsCount, currentCount, count, 300);
      resultsInfo.style.display = 'block';
    }

    // Search implementation
    const performSearch = () => {
      const query = searchInput.value.toLowerCase().trim();
      
      // Toggle clear button visibility
      clearButton.style.display = query ? 'block' : 'none';
      
      // If empty query, show all events
      if (!query) {
        animateElement(emptyState, false);
        eventItems.forEach(item => {
          animateElement(item, true);
        });
        updateResultsCount(eventItems.length);
        return;
      }

      // Filter events using the utility function
      const matches = filterEvents(events, query);

      // Update UI based on results
      updateResultsCount(matches.length);
      animateElement(emptyState, matches.length === 0);
      
      // Show/hide matching events with staggered animation
      eventItems.forEach((item, index) => {
        const eventId = item.getAttribute('data-id');
        const visible = matches.some(event => event.id === eventId);
        
        // Add slight delay based on index for staggered effect
        setTimeout(() => {
          animateElement(item, visible);
        }, index % 5 * 50); // Stagger in groups of 5
      });
    };

    // Set up event listeners with loading indicator
    const debouncedSearch = debounce(() => {
      searchLoader.style.display = 'none';
      performSearch();
    }, 400);
    
    searchInput.addEventListener('input', () => {
      searchLoader.style.display = 'block';
      debouncedSearch();
    });
    
    clearButton.addEventListener('click', () => {
      searchInput.value = '';
      performSearch();
      searchInput.focus();
    });
  </script>
</html>

<style lang="scss">
  .events-list-page {
    text-align: center;
  }

  ul.event-list {
    list-style: none;
    padding: 0;
    margin: 0;
  }

  li.event-list-item a {

    $width: 720px;

    //------------------------------------------------------------

    // size
    max-width: $width;
    margin-top: 1rem;
    margin-bottom: 1rem;
    
    // layout
    display: inline-block;
  
    // color
    color: inherit;
    &:visited{
      color: inherit;
    }

    // text
    text-decoration: none;

    // image
    img {
      max-width: 100%;
      width: 720px;
      height: auto;
    }

    // event info block
    .event-list-item__info {
      padding: 2rem;
      text-align: left;
    }

    &:hover .event-title {
      text-decoration: underline;
      text-decoration-thickness: 2px;
    }

  }

  .form-control__append {
    position: absolute;
    right: 10px;
    top: 50%;
    transform: translateY(-50%);
    background: none;
    border: none;
    color: #999;
    cursor: pointer;
    padding: 5px;
    
    &:hover {
      color: #666;
    }
  }
  
  .event-list-item {
    transition: transform 0.3s ease-out, opacity 0.4s ease-out, height 0.5s ease-out;
    opacity: 0;
    transform: translateY(20px);
    height: auto;
    overflow: hidden;
    
    &.loaded {
      opacity: 1;
      transform: translateY(0);
    }
    
    &.hide {
      opacity: 0;
      height: 0;
      margin: 0;
      padding: 0;
      transform: translateY(10px);
    }
  }
  
  .hide {
    display: none;
  }
  
  .search-results-info {
    text-align: center;
    color: #666;
    font-size: 0.9rem;
    margin-top: 1rem;
    transition: opacity 0.3s ease;
    
    .results-count {
      font-weight: bold;
      color: #555;
    }
  }
  
  .event-list__empty {
    text-align: center;
    margin: 3rem 0;
    transition: opacity 0.3s ease, transform 0.4s ease;
    opacity: 0;
    transform: scale(0.95);
    
    &:not(.hide) {
      opacity: 1;
      transform: scale(1);
    }
  }
  
  .search-loader {
    position: absolute;
    right: 40px;
    top: 50%;
    transform: translateY(-50%);
    
    &__spinner {
      width: 18px;
      height: 18px;
      border: 2px solid rgba(0, 0, 0, 0.1);
      border-top-color: #767676;
      border-radius: 50%;
      animation: spin 0.8s linear infinite;
    }
  }
  
  @keyframes spin {
    to { transform: rotate(360deg); }
  }
</style>
