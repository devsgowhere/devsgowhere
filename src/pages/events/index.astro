---
import BaseHead from "../../components/BaseHead.astro";
import Header from "../../components/Header.astro";
import Theme from "../../layouts/Theme.astro";
import Footer from "../../components/Footer.astro";

import { SITE_TITLE, SITE_DESCRIPTION } from "../../consts";
import { getCollection } from "astro:content";
import { Image } from "astro:assets";
import FormattedEventDate from "../../components/FormattedEventDate.astro";

const orgs = await getCollection("orgs");

const now = new Date();
const events = (await getCollection("events"))
  .filter((event) => {
    const startDate = new Date(event.data.startDate);
    return startDate >= now;
  })
  .sort((a, b) => a.data.startDate.valueOf() - b.data.startDate.valueOf());
---

<!doctype html>
<html lang="en">
  <head>
    <BaseHead title={SITE_TITLE} description={SITE_DESCRIPTION} />
  </head>
  <Theme>
    <Header />
    <main class="events-list-page pt-xl pb-3xl">
      <h1 class="text-3xl text-bold text-accent mb-xl">
        Upcoming Events
      </h1>      
      <div class="container">
        <section>
              <div class="event-search form-control">
                <i class="form-control__prepend fa fa-search"></i>
                <input
                  id="event-search__input"
                  type="text"
                  class="form-control__input"
                  placeholder="Search"
                />
              </div>
          <ul class="event-list">
            {
              events.map((event) => (
                <li class="event-list-item" data-id={event.id}>
                  <a class="card" href={`/events/${event.id}/`}>
                    <Image
                      width={720}
                      height={360}
                      src={event.data.heroImage}
                      alt=""
                    />
                    <div class="event-list-item__info">
                    <div class="org-name text-s text-gray-5 mb-2xs">
                        {
                          orgs.find((org) => org.id === event.data.org.id)?.data
                            .title
                        }
                      </div>
                      <div class="event-title text-accent text-3xl text-bold mb-l">{event.data.title}</div>
                      <div class="event-date mb-xs text-bold">
                        <i class="fa fa-calendar-days mr-xs"></i>
                        <FormattedEventDate
                          startDate={event.data.startDate}
                          startTime={event.data.startTime}
                          endDate={event.data.endDate}
                          endTime={event.data.endTime}
                        />
                      </div>
                      <div class="event-location mb-0">
                        <div style="display: flex; align-items: baseline;">
                        <i class="fa fa-location-dot mr-xs"></i>
                        <div style="display: flex; flex-direction: column; align-items: flex-start;">
                        <p class="ml-xs mt-0 mb-0 text-bold">{event.data.venue}</p>
                        <p class="ml-xs mt-0">{event.data.venueAddress}</p>
                        </div>
                        </div>
                      </div>
                      <div class="event-description mb-m">{event.data.description.slice(0, 200)}...</div>                      
                        <ul class="tag-list mb-0">
                        { event.data.tags?.slice(0,5).map((tag)=>{
                          return (
                            <li class="tag">
                              #{tag}
                            </li>
                          )
                        }) }
                      </ul>
                    </div>                    
                  </a>
                </li>
              ))
            }
          </ul>        
          <div class="event-list__empty" style="display: none;">
            <p class="text-gray-5 text-2xl">No results found!</p>
          </div>
      </div>
    </main>
    <Footer />
  </Theme>
  <script>
    // fetch all events from "events/search-index.json"
    type EventSearchIndex = {
      id: string;
      title: string;
      tags: string[];
      org: { id: string };
    };
    declare const orgs: Array<{ id: string; data: { title: string } }>; // Updated type to include organizer ID

    const events: EventSearchIndex[] = [];

    fetch('/events/search-index.json')
      .then((response) => response.json())
      .then((data: EventSearchIndex[]) => {
        events.push(...data);
      })
      .catch((error) => {
        console.error(`Error fetching search index for 'events' collection:`, error);
      });

    // listen for input change on search input
    const searchInputEl = document.querySelector<HTMLInputElement>('#event-search__input');

    if (searchInputEl) {
      searchInputEl.addEventListener('input', (e: Event) => {
        const target = e.target as HTMLInputElement | null;
        const searchValue = target?.value?.toLowerCase().trim() || '';
        const emptyStateEl = document.querySelector<HTMLElement>('.event-list__empty');

        // if search value is empty, show all events
        if (searchValue === '') {
          // hide "No results found" message
          if (emptyStateEl) {
            emptyStateEl.style.display = 'none';
          }
          // show all events
          document.querySelectorAll<HTMLElement>('.event-list-item').forEach((item) => {
            item.classList.remove('hide');
          });
          return;
        }

        // filter events based on search value
        const filteredEvents = events.filter((event) => {
          // check if event name includes search value
          if (event.title.toLowerCase().includes(searchValue)) {
            return true;
          }
          // check if event tags include search value
          if (event.tags.some((tag: string) => tag.toLowerCase().includes(searchValue))) {
            return true;
          }
          // check if organizer name includes search value
          const organizer = orgs.find((org) => org.id === event.org.id)?.data.title.toLowerCase();
          if (organizer && organizer.includes(searchValue)) {
            return true;
          }
          return false;
        });

        // if no events found, show "No results found" message
        if (emptyStateEl) {
          emptyStateEl.style.display = filteredEvents.length === 0 ? 'block' : 'none';
        }

        // show/hide events based on search value
        document.querySelectorAll<HTMLElement>('.event-list-item').forEach((item) => {
          const eventId = item.getAttribute('data-id');
          const show = filteredEvents.some((event) => event.id === eventId);
          if (show) {
            item.classList.remove('hide');
          } else {
            item.classList.add('hide');
          }
        });
      });
    }
  </script>
</html>

<style lang="scss">
  .events-list-page {
    text-align: center;
  }

  ul.event-list {
    list-style: none;
    padding: 0;
    margin: 0;
  }

  li.event-list-item a {

    $width: 720px;

    //------------------------------------------------------------

    // size
    max-width: $width;
    margin-top: 1rem;
    margin-bottom: 1rem;
    
    // layout
    display: inline-block;
  
    // color
    color: inherit;
    &:visited{
      color: inherit;
    }

    // text
    text-decoration: none;

    // image
    img {
      max-width: 100%;
      width: 720px;
      height: auto;
    }

    // event info block
    .event-list-item__info {
      padding: 2rem;
      text-align: left;
    }

    &:hover .event-title {
      text-decoration: underline;
      text-decoration-thickness: 2px;
    }

  }
</style>
