---
import type { CollectionEntry } from "astro:content";
import { Image } from "astro:assets";
import { getEntry } from "astro:content";
import BaseHead from "../components/BaseHead.astro";
import Header from "../components/Header.astro";
import Footer from "../components/Footer.astro";
import Theme from "./Theme.astro";
import SummaryCard from "../components/SummaryCard.astro";
import FormattedEventDate from "../components/FormattedEventDate.astro";
import AddToCalendarButton from "../components/AddToCalendarButton.tsx";

type Props = CollectionEntry<"events">["data"];

const {
  title,
  description,
  startDate,
  startTime,
  endDate,
  endTime,
  timezone,
  heroImage,
  rsvpButtonUrl,
  rsvpButtonText,
  org,
  venue,
  venueAddress,
} = Astro.props;

const orgData = await getEntry(org);

let orgUrl = `/orgs/${org.id}`;

---

<html lang="en">
  <head>
    <BaseHead title={title} description={description} image={heroImage} />
    <link
      rel="stylesheet"
      href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css"
      integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY="
      crossorigin=""
    />
    <script
      src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"
      integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo="
      crossorigin=""></script>
    <script is:inline define:vars={{ venueAddress, venue }}>
      document.addEventListener("DOMContentLoaded", () => {
        // Initialize map immediately with default Singapore coordinates
        const DEFAULT_COORDS = [1.3521, 103.8198]; // Singapore default coordinates
        const LOCATION_ZOOM = 16;
        const DEFAULT_ZOOM = 13;
        
        // Initialize the map right away
        const map = L.map("map").setView(DEFAULT_COORDS, DEFAULT_ZOOM);
        
        // Add the tile layer
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
          attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
        }).addTo(map);
        
        // Create custom pin icon
        const mapPin = L.icon({
          iconUrl: "/assets/round-pushpin.png",
          iconSize: [25, 25],
          iconAnchor: [12, 41],
          popupAnchor: [1, -34],
        });
        
        
        // Add a default marker initially
        let marker = L.marker(DEFAULT_COORDS, { icon: mapPin })
          .addTo(map)
          .bindPopup(venue || "Event Location")
          .openPopup();
        
        // Now fetch location data in the background
        (async () => {
          if (!venueAddress) {
            return; // Exit if no address is available
          }
          
          // Extract postal code from address if present (Singapore format: 6 digits)
          const postalCodeMatch = venueAddress.match(/\b\d{6}\b/);
          const postalCode = postalCodeMatch?.[0];
          
          try {
            // Method 1: Try with postal code from our dataset
            if (postalCode) {
              try {
                const response = await fetch("/json/postal_codes_22_06_2023.json");
                if (response.ok) {
                  const locationMapData = await response.json();
                  
                  if (locationMapData[postalCode]) {
                    const location = locationMapData[postalCode];
                    const lat = parseFloat(location.lat);
                    const lng = parseFloat(location.lon);
                    
                    if (!isNaN(lat) && !isNaN(lng)) {
                      map.removeLayer(marker);
                      map.setView([lat, lng], LOCATION_ZOOM);
                      marker = L.marker([lat, lng], { icon: mapPin })
                        .addTo(map)
                        .bindPopup(venue || "Event Location")
                        .openPopup();
                      return; // Success with postal code, exit
                    }
                  }
                }
              } catch (err) {
                // Continue to fallback geocoding
              }
            }
            
            // Method 2: Fallback to OpenStreetMap Nominatim geocoding
            // Append "Singapore" to improve geocoding accuracy
            let searchAddress = venueAddress;
            if (!searchAddress.toLowerCase().includes("singapore")) {
              searchAddress += ", Singapore";
            }
            
            // Use Nominatim API
            const encodedAddress = encodeURIComponent(searchAddress);
            const nominatimUrl = `https://nominatim.openstreetmap.org/search?format=json&q=${encodedAddress}&limit=1`;
            
            const response = await fetch(nominatimUrl, {
              headers: {
                'Accept': 'application/json',
                'User-Agent': 'DevsGoWhere/1.0'
              }
            });
            
            if (response.ok) {
              const data = await response.json();
              
              if (data && data.length > 0) {
                const location = {
                  lat: parseFloat(data[0].lat),
                  lon: parseFloat(data[0].lon)
                };
                
                // Update map
                map.removeLayer(marker);
                map.setView([location.lat, location.lon], LOCATION_ZOOM);
                marker = L.marker([location.lat, location.lon], { icon: mapPin })
                  .addTo(map)
                  .bindPopup(venue || "Event Location")
                  .openPopup();
              }
            }
          } catch (error) {
            // Default marker remains if there's an error
          }
        })();
        
        // Hide the attribution control
        setTimeout(() => {
          const attributionControl = document.querySelector("#map > div.leaflet-control-container > div.leaflet-bottom.leaflet-right > div");
          if (attributionControl) {
            attributionControl.style.display = "none";
          }
        }, 100);
      });
    </script>
  </head>
  <Theme>
    <Header />
    <main class="event-page">
      <div class="container">
        <article class="card">
          <div class="hero-image">
            {
              heroImage && (
                <Image width={1020} height={510} src={heroImage} alt="" />
              )
            }
          </div>              
            <div class="pt-l px-l pb-xl">
              {org && <div class="org-name mb-xs pl-0 text-s text-gray-6">Hosted by: {orgData.data.title}</div>}
              <h1 class="event-title text-3xl text-accent">{title}</h1>
              <hr class="mb-l"/>   
              <ul class="date mb-m">
                <i class="fa-solid fa-clock mr-xs"></i>      
                <FormattedEventDate
                  startDate={startDate}
                  startTime={startTime}                  
                  endDate={endDate ?? ""}
                  endTime={endTime ?? ""}
                />
              </ul>
                <ul style="display: flex; align-items: baseline; gap: 0.5rem;">
                <i class="fa-solid fa-location-dot mr-xs"></i>
                <div style="display: flex; flex-direction: column; align-items:baseline;">
                  <p class="mt-0 mb-xs" style="font-weight: bold;">{venue}</p>
                  <p class="text-capitalise mt-0 mb-0">{(venueAddress ?? '').toLowerCase()}</p>
                </div>
                </ul>
                <div
                  id="map"
                  class="map-container mt-m"
                  style="height: 300px; width: 100%; border-radius: 8px;"
                >
                </div>
                <script is:inline define:vars={{ venueAddress }}>
          </script>
              <div class="ml-s" style={{display: "flex", gap: "1rem", alignItems: "center" }}>
              {
                rsvpButtonUrl && (
                  <a
                    href={rsvpButtonUrl}
                    class="rsvp-button"
                    target="_blank"
                    rel="noopener noreferrer"
                  >
                    {rsvpButtonText ?? "Link"}
                  </a>
                )
              }                       
              <a
              href={`https://www.google.com/maps/place/${venueAddress}`}
              class="rsvp-button"
              target="_blank"
              rel="noopener noreferrer"
            >
              <i class="fa-solid fa-location-dot mr-xs"></i>
              Open in Maps
            </a>
              <AddToCalendarButton        
                client:only="react"
                label="Add to Calendar" 
                name={title}
                options="'Apple','Google'"
                location={venueAddress ?? ""}
                startDate={startDate}
                endDate={endDate ?? ""}
                startTime={startTime}
                endTime={endTime ?? ""}
                timeZone={timezone ?? "Asia/Singapore"}
              />
            </div>
              <hr class="mb-l mt-m"/>   
            <div class="event-markup">
            <slot />
            </div>
            <ul class="tag-list mb-l">
              { Astro.props.tags?.slice(0, 10).map((tag) => (
                <li class="tag">
                  # {tag}
                </li>
              )) }
            </ul>
          </div>
        </article>
        <aside class="sticky-aside">
          <div class="event-panel">
            <SummaryCard
              title={title}
              description={description}
              startDate={startDate}
              startTime={startTime}
              endDate={endDate ?? ""}
              endTime={endTime ?? ""}
              timezone={timezone ?? "Asia/Singapore"}
              venue={venue ?? ""}
              venueAddress={venueAddress ?? ""}
              org={org && orgData.data.title}
              rsvpButtonUrl={rsvpButtonUrl ?? ""}
              rsvpButtonText={rsvpButtonText ?? "RSVP"}
            />
            <div class="org-info-container mt-xl">
              <a class="org-info__logo mb-l" href={orgUrl}>
                {
                  // if logoImage is defined, use it
                  orgData.data.logoImage && (
                    <Image width={360} height={360} src={orgData.data.logoImage} alt={title} />
                  )
                }
              </a>
              <div class="org-info__info-block">
                <div class="org-info__name text-bold text-accent text-xl mb-s">
                  {orgData.data.title}
                </div>
                <p>
                  {
                    // let max length be 150 characters
                    (orgData.data.description ?? "").length > 150
                      ? `${(orgData.data.description ?? "").slice(0, 150)}...`
                      : (orgData.data.description ?? "")
                  }
                </p>
                <div>
                  <a href={orgUrl}><i class="fa fa-arrow-right"></i> More events</a>
                </div>
              </div>
            </div>
            </div>
        </aside>
      </div>
    </main>
    <Footer />
    </Theme>
</html>

<style lang="scss">
  .event-page {

    $article-width: 800px;
    $aside-width: 400px;
    $gap: 2rem;
    $padding-x: 1rem;
    padding: 4rem 0;
    
    .container {
      width: calc(#{$article-width} + #{$aside-width} + #{$gap} + 2 * #{$padding-x});
      max-width: 100%;
      display: flex;
      flex-direction: row;
      flex-wrap: wrap;
      justify-content: center;
      gap: $gap;
      padding: 0 $padding-x;

      // >>> article      
      article {
        width: $article-width;
        min-width: 560px;
        background-color: white;
        .hero-image img {
          width: 100%;
          height: auto;
          max-height: 510px;
          object-fit: cover;
        }
      }

      // >>> right side summary info
      aside {
        width: $aside-width;
        display: flex;
        flex-direction: column;
        align-items: center;
        padding: 0 1rem;
        > div {
          max-width: 100%; // prevent contents (e.g. long link text, like urls) from exceeding the container
        }        
      }
    }
    .sticky-aside {
      position: sticky;
      top: 1rem; // Adjust this value to control the distance from the top of the viewport
      align-self: flex-start; // Ensures proper alignment in flex containers
    }

    //
    // mobile layout
    //
  
    @media (max-width: 768px) {

      // remove top padding on main
      padding-top: 0; 
      
      //
      // stack article on top of aside
      //
      .container {

        flex-direction: column;
        gap: 0;
        width: 100%;
        max-width: 100%;
        padding: 0;

        article {
          min-width: 1px;
          width: 100%;
          margin-bottom: 2rem;
        }

        aside {
          width: 100%;
        }
        
      }
      
    }

    // >>> logo
    .event-panel {
      // square shape    
      width: $aside-width;
      //height: $aside-width;
      background-color: transparent;
      border-radius: 10px;
      img {
        width: 100%;
        height: 100%;
        object-fit: cover;
      }
      margin-bottom: 2rem;
    }  
      .date {
        margin-bottom: 0.5em;
        color: rgb(var(--gray));
      }
      .last-updated-on {
        font-style: italic;
      }
      .event-title {
        margin-bottom: 0.5em;
        color: rgb(var(--gray));
      }
      .rsvp-button {
        display: inline-block;
        padding: 0.8em 1.6em;
        margin: 1em 0;
        background-color: var(--accent, #007BFF);
        color: white;
        text-decoration: none;
        border-radius: 4px;
        font-weight: bold;
        transition: background-color 0.2s ease;
      }
      .rsvp-button:hover {
        background-color: var(--accent,  #0056b3);
        color: white;
      }
      .org-name {
        color: rgb(var(--gray));
      }

      //
      // org info
      //
      .org-info-container{

        width: 100%;

        padding: 2rem;

        // >>> logo
        .org-info__logo{

          $size: 200px;
          
          width: $size;
          height: $size;

          // center the logo horizontally
          margin: 0 auto;
          
          background-color: white;
          border-radius: 10px;

          // center the content
          display: flex;
          justify-content: center;
          align-items: center;

          // padding to prevent content from touching the edges
          padding: 2rem;
          
        }

      }

  }

</style>
