---
import type { CollectionEntry } from "astro:content";
import { Image } from "astro:assets";
import BaseHead from "../components/BaseHead.astro";
import Header from "../components/Header.astro";
import Theme from "./Theme.astro";
import Footer from "../components/Footer.astro";
import EventCard from "../components/EventCard.astro";

type Props = CollectionEntry<"orgs">["data"] & {
  upcomingEvents: CollectionEntry<"events">[];
  pastEvents: CollectionEntry<"events">[];
};

const { title, description, heroImage, logoImage, upcomingEvents, pastEvents } = Astro.props;
---

<html lang="en">
  <head>
    <BaseHead title={title} description={description!} image={heroImage} />
  </head>
  <Theme>
    <Header />
    <main class="org-profile-page">
      <div class="container">
        <div>
          <article class="card">
            <div class="hero-image">
              {
                heroImage && (
                  <Image width={1020} height={510} src={heroImage} alt={title} />
                )
              }
            </div>
            <div class="pt-l px-l pb-xl">
              <h1 class="org-name text-3xl text-accent">{title}</h1>
              <ul class="tag-list mb-l">
                {
                  Astro.props.tags
                    ?.slice(0, 10)
                    .map((tag) => <li class="tag"># {tag}</li>)
                }
              </ul>
              <div class="org-profile-markup">
                <slot />
              </div>
            </div>
          </article>
          <section>
            {upcomingEvents.length > 0 && (
              <h2 class="text-2xl text-bold text-accent mt-xl mb-xs">
                Upcoming Events
              </h2>
              <ul class="event-list">
                {
                  upcomingEvents.map((event) => (
                    <li class="event-list-item" data-id={event.id}>
                      <EventCard event={event} />
                    </li>
                  ))
                }
              </ul>
            )}

            {pastEvents.length > 0 && (
              <h2 class="text-2xl text-bold text-accent mt-xl mb-xs">
                Past Events
              </h2>
              <ul class="event-list">
                {
                  pastEvents.map((event) => (
                    <li class="event-list-item" data-id={event.id}>
                      <EventCard event={event} />
                    </li>
                  ))
                }
              </ul>
            )}
          </section>
        </div>
        <aside class="sticky-aside">
          <div class="org-logo">
            {
              logoImage && (
                <Image width={360} height={360} src={logoImage} alt={title} />
              )
            }
          </div>
          <div>
            <div class="text-header text-2xl text-center mb-m">
              Join the community!
            </div>
            <ul class="org-links">
              {
                [
                  "website",
                  "meetup",
                  "telegram",
                  "discord",
                  "twitter",
                  "linkedin",
                  "facebook",
                  "instagram",
                  "tiktok",
                  "youtube",
                  "github",
                ]
                  .filter((link) => {
                    return Astro.props[link] !== undefined;
                  })
                  .map((link) => {
                    let url = Astro.props[link];
                    let icon = `fab fa-${link}`;
                    let linkText = link;
                    let capitalise = true;

                    if (link === "website") {
                      icon = "fa fa-globe";
                      linkText = Astro.props[link] || "website";
                      capitalise = false;
                    } else if (link === "instagram") {
                      let handle = Astro.props[link];
                      url = `https://www.instagram.com/${handle}`;
                      linkText = "@" + handle;
                      capitalise = false;
                    }

                    return (
                      <li>
                        <a href={url} target="_blank" rel="noopener">
                          <i class:list={["fa-fw", icon, "mr-xs"]} />
                          <span
                            class:list={[{ "text-capitalise": capitalise }]}
                          >
                            {linkText}
                          </span>
                        </a>
                      </li>
                    );
                  })
              }
            </ul>
          </div>
        </aside>
      </div>
    </main>
    <Footer />
  </Theme>
</html>

<style lang="scss">
  .org-profile-page {
    $article-width: 800px;
    $aside-width: 400px;
    $gap: 2rem;
    $padding-x: 1rem;

    padding: 4rem 0;

    .container {
      width: calc(
        #{$article-width} + #{$aside-width} + #{$gap} + 2 * #{$padding-x}
      );
      max-width: 100%;

      display: flex;
      flex-direction: row;
      flex-wrap: wrap;
      justify-content: center;
      gap: $gap;
      padding: 0 $padding-x;

      // >>> article

      article {
        width: $article-width;
        min-width: 560px;

        background-color: white;

        .hero-image img {
          width: 100%;
          height: auto;
          max-height: 510px;
          object-fit: cover;
        }
      }

      // >>> right side summary info
      aside {
        width: $aside-width;

        display: flex;
        flex-direction: column;
        align-items: center;

        padding: 0 1rem;

        > div {
          max-width: 100%; // prevent contents (e.g. long link text, like urls) from exceeding the container
        }
      }
    }
    .sticky-aside {
      position: sticky;
      top: 1rem; // Adjust this value to control the distance from the top of the viewport
      align-self: flex-start; // Ensures proper alignment in flex containers
    }

    //
    // mobile layout
    //

    @media (max-width: 768px) {
      // remove top padding on main
      padding-top: 0;

      //
      // stack article on top of aside
      //
      .container {
        flex-direction: column;
        gap: 0;
        width: 100%;
        max-width: 100%;
        padding: 0;

        article {
          min-width: 1px;
          width: 100%;
          margin-bottom: 2rem;
        }

        aside {
          width: 100%;
        }
      }
    }

    // >>> logo
    .org-logo {
      // square shape
      width: $aside-width;
      height: $aside-width;

      // add padding - to prevent image from touching the edges
      padding: 2rem;

      background-color: white;
      border-radius: 10px;
      overflow: hidden;

      img {
        width: 100%;
        height: 100%;
        object-fit: contain;
      }

      margin-bottom: 2rem;
    }

    // >>> org links
    .org-links {
      list-style: none;
      padding: 0;
      margin: 0;
      display: flex;
      flex-direction: column;
      gap: 0.5rem;

      text-align: left;

      li a {
        display: inline-flex;
        align-items: baseline;
        font-size: 1.25rem;
        text-decoration: none;

        i {
          display: inline-block;
          width: 1.25em;
        }

        span {
          word-break: break-all; // to break up long urls
        }

        &:hover {
          span {
            text-decoration: underline;
          }
        }
      }
    }
  }
</style>
